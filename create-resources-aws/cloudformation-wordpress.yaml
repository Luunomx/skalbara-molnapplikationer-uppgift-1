AWSTemplateFormatVersion: "2010-09-09"
Description: >
  WordPress Environment: VPC + 2 AZ, ALB, AutoScaling Group (EC2 + EFS),
  RDS MariaDB, Security Groups. EC2 instances bootstrapped with WordPress.

Parameters:
  AdminUser:
    Type: String
    Default: admin
    Description: WordPress admin username
  AdminPassword:
    Type: String
    NoEcho: true
    Default: Omega181
    Description: WordPress admin password
  AdminEmail:
    Type: String
    Default: hugohemlin@hotmail.com
    Description: WordPress admin email
  SiteTitle:
    Type: String
    Default: "Luunoms site"
    Description: WordPress site title
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: new-ec2-key
    Description: EC2 KeyPair
  AllowedSSH:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR for SSH access
  DBName:
    Type: String
    Default: wordpressdb
  DBUser:
    Type: String
    Default: wpadmin
  DBPassword:
    Type: String
    NoEcho: true
    Default: Omega181
  InstanceType:
    Type: String
    Default: t3.micro

Mappings:
  SubnetConfig:
    eu-west-1:
      AZa: eu-west-1a
      AZb: eu-west-1b

Resources:

  # ---------------- VPC & Networking ----------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: wp-vpc }]

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !FindInMap [SubnetConfig, !Ref "AWS::Region", AZa]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !FindInMap [SubnetConfig, !Ref "AWS::Region", AZb]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-1c
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true

  SubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable

  MountTargetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PublicSubnetA
      SecurityGroups: [!Ref EC2SecurityGroup]

  MountTargetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PublicSubnetB
      SecurityGroups: [!Ref EC2SecurityGroup]

  MountTargetC:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PublicSubnetC
      SecurityGroups: [!Ref EC2SecurityGroup]

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  # ---------------- Security Groups ----------------
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedSSH
  
  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow NFS from EC2
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  # ---------------- EFS ----------------
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_7_DAYS

  MountTargetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PublicSubnetA
      SecurityGroups: [!Ref EFSSecurityGroup]

  MountTargetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PublicSubnetB
      SecurityGroups: [!Ref EFSSecurityGroup]
  
  MountTargetC:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PublicSubnetC
      SecurityGroups: [!Ref EFSSecurityGroup]

  # ---------------- RDS (MariaDB) ----------------
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: WP DB subnets
      SubnetIds: [!Ref PublicSubnetA, !Ref PublicSubnetB, !Ref PublicSubnetC]

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: mariadb
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBName: !Ref DBName
      VPCSecurityGroups: [!Ref RDSSecurityGroup]
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: true
      MultiAZ: false

  # ---------------- ALB ----------------
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: [!Ref PublicSubnetA, !Ref PublicSubnetB, !Ref PublicSubnetC]
      SecurityGroups: [!Ref ALBSecurityGroup]

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  # ---------------- Launch Template + ASG ----------------
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-04fc3aeb3378acab2
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds: [!Ref EC2SecurityGroup]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            exec > >(tee /var/log/userdata.log|logger -t userdata ) 2>&1

            echo "==== Updating system ===="
            dnf update -y

            echo "==== Installing packages ===="
            dnf install -y amazon-efs-utils httpd php php-mysqlnd mariadb105 tar nmap-ncat stress

            echo "==== Enabling and starting Apache ===="
            systemctl enable httpd
            systemctl start httpd

            echo "==== Setting up EFS mount via systemd ===="
            mkdir -p /var/www/html
            cat <<EOF > /etc/systemd/system/efs-mount.service
            [Unit]
            Description=Mount EFS
            After=network-online.target
            Wants=network-online.target

            [Service]
            Type=oneshot
            ExecStart=/bin/mount -t efs -o tls ${FileSystem}:/ /var/www/html
            RemainAfterExit=true

            [Install]
            WantedBy=multi-user.target
            EOF

            systemctl daemon-reload
            systemctl enable efs-mount.service
            systemctl start efs-mount.service

            echo "==== Downloading WordPress ===="
            cd /var/www/html
            curl -O https://wordpress.org/latest.tar.gz
            tar -xzf latest.tar.gz --strip-components=1
            rm latest.tar.gz

            echo "==== Configuring WordPress ===="
            cp wp-config-sample.php wp-config.php
            sed -i "s/database_name_here/${DBName}/" wp-config.php
            sed -i "s/username_here/${DBUser}/" wp-config.php
            sed -i "s/password_here/${DBPassword}/" wp-config.php
            sed -i "s/localhost/${DBInstance.Endpoint.Address}/" wp-config.php

            echo "==== Waiting for RDS to be ready ===="
            until nc -z ${DBInstance.Endpoint.Address} 3306; do
              echo "Waiting for RDS..."
              sleep 10
            done

            echo "==== Installing WP-CLI ===="
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
            chmod +x wp-cli.phar
            mv wp-cli.phar /usr/local/bin/wp

            echo "==== Running WP install ===="
            sudo -u apache wp core install \
              --url="http://${ALB.DNSName}" \
              --title="${SiteTitle}" \
              --admin_user="${AdminUser}" \
              --admin_password="${AdminPassword}" \
              --admin_email="${AdminEmail}" \
              --skip-email \
              --path=/var/www/html || true

            echo "==== Health check marker ===="
            echo "OK" > /var/www/html/healthcheck.txt


  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref PublicSubnetA, !Ref PublicSubnetB, !Ref PublicSubnetC]
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      TargetGroupARNs: [!Ref ALBTargetGroup]
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
      Cooldown: 300

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1
      Cooldown: 300

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Scale up if CPU > 60% for 2 minutes"
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 60
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Scale down if CPU < 30% for 5 minutes"
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 30
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref ScaleDownPolicy

Outputs:
  ALBDNSName:
    Value: !GetAtt ALB.DNSName
  RDSEndpoint:
    Value: !GetAtt DBInstance.Endpoint.Address
  EFSId:
    Value: !Ref FileSystem
